; Minimal FORTH for blackhole_os
; How is this gonna work? No clue.
; Status stuff @ 0x0FF0
; Strings @ 0x1000
; Map space 0x2000-0x3FFF
; Word space 0x4000-0xAFFF
; Line space 0xB000-0xB7FF
; Compiled token space 0xB800-0xCFFF


; Step 0: Zero out memory

; Initialize HL to end of system words
set_h end_system_words
set_l end_system_words

; Set a label for a loop to zero memory until H == 0xD0
lbl step_0_zero_mem
set_dref 0x0
inc
set_a_h
cmp 0xD0
jnz step_0_zero_mem

; Step 0.5: Initialize a 0x20 at one byte before line space, for my sanity's sake
lbl step_1_read_input
set_h 0xAF
set_l 0xFF
set_dref 0x20

; Step 1: Read user input
; Store at 0xB000, break at CR (0x0D) char
; Null-terminate
; Print READY
set_h system_ready
set_l system_ready
rcl
inc
cmp 0x0
jez 3
out
jrel -5
set_acc 0x0D
out
sub 3
out
; Store line space addr into HL
set_h 0xB0
set_l 0x00

; Label for input loop
lbl step_1_read_input_loop
in ; Read one byte from io
cmp 0x0A
jez 2
cmp 0x0D ; Check if it's a newline (will break loop)
jez step_1_read_input_loop_break ; Break the loop
cmp 0x08 ; Check for backspace (they're special)
jnz 5 ; If not, jump past the next code
dec 
rcl ; Decrement and read the previous char
out
jrel step_1_read_input_loop
out
sto ; Store whatever's in A (read char or prev char if backspace)
inc ; And increment
jrel step_1_read_input_loop
lbl step_1_read_input_loop_break ; Break loop here
set_acc 0x0D
out
sub 3
out
set_dref 0x00 ; Null terminate string by writing to whatever HL was pointing to


; Step 2: Parse input into tokens, and write a 2 byte value describing them
; Split by space (0x20)
lbl step_2_tokenize_input

; Set main HL to our line space
set_h 0xB0
set_l 0x00
push_hl

; Set alt HL to word map space
lbl step_2_success_next_token
set_acc 0xFF
bak
pop_hl
ex_hl
set_h word_map
set_l word_map
ex_hl
; Check if we're actually at the end of line
rcl
cmp 0x0
jez step_1_read_input

lbl step_2_new_token
; Get back to the beginning of the current token
res
cmp 0x0
jnz 2
dec
dec
rcl
out
cmp 0x20
jez 2
jrel -5
inc

; Read word map to next string
ex_hl
rcl
inc
cmp 0x3B
jez 2
jrel -4
; We found our delimiter, now we need the type
rcl
inc
cmp 0xFF ; If we're at the end of the words then parse as int
jnz step_2_found_word_in_map ; for now just error
set_h system_invalid_symbol
set_l system_invalid_symbol
rcl
inc
cmp 0x0
jez 3
out
jrel -5

ex_hl ; print the token that failed
rcl
inc
cmp 0x20
jez 5
cmp 0x0
jez 3
out
jrel -7
ex_hl

set_acc 0x0D
out
sub 3
out
set_h step_1_read_input ; jump back to read loop
set_l step_1_read_input
jmp 
lbl step_2_new_token_intermediate
jrel step_2_new_token
; otherwise
lbl step_2_found_word_in_map
push_hl
set_h system_compiler_mode
set_l system_compiler_mode
sto
; Now we've stored our symbol type, time to match
pop_hl
ex_hl

; Try to match
lbl step_2_tokenizer_loop

rcl ; Read character from line
inc
cmp 0x20 ; If it's a space we'll make it not a space
jnz 2 ; So the next check is easier
sub 0x20

bak ; back this character up
ex_hl
rcl ; read the next word character
inc
ex_hl

sub_bak ; compare the 2
jnz step_2_new_token_intermediate ; if we failed a match, retry

; If we matched, we should be on a null
res
cmp 0x00
jnz step_2_tokenizer_loop ; If we aren't, keep going

; Congrats, we matched one. Now we read the address from the word map, and push it to the compiled space
; Depending on type, we'd do some different stuff, but it's all type 0 for now
push_hl ; Back our line index up temporarily
set_h system_compiled_space_ptr
set_l system_compiled_space_ptr

rcl
bak ; low byte
inc
rcl ; high byte

; Alright, we have our pointer
set_h_a
res
set_l_a

; Write a delimiter of type 1
set_dref 0x3B
inc
set_dref 0x01
inc

; Now seek to the address data in the word map
ex_hl
rcl
inc
cmp 0xFF ; we're looking for this delimiter
jnz -3

rcl ; low byte
push_a ; we need this in a sec
inc
rcl ; high byte
bak
ex_hl

; Store it
pop_a
; see what i meant?
sto
inc
res
sto
inc
; Aight, that's stored, now store into the pointer and repeat
set_a_h
bak
set_a_l
set_h system_compiled_space_ptr
set_l system_compiled_space_ptr
sto
inc
res
sto
set_h step_2_success_next_token
set_l step_2_success_next_token
jmp

; Step 3: 


; Step 3.5: Convert token to number
; Convert each digit by subtracting 0x30
; If digits are in range, add them up
; If the token is a valid number, add 0xFF[NUMBER] to compiled space
lbl step_3.5_conv_number
pop_hl
ex_hl
set_h 0xB7
set_l 0xFF
set_dref 0xFF
inc
lbl step_3.5_conv_number_loop
rcl
cmp 0x0
jez add_everything_together
cmp 0x30
jlz step_3.5_conv_error
cmp 0x3A
jgz step_3.5_conv_error
sub 0x30
sto
inc
jrel step_3.5_conv_number_loop
lbl add_everything_together
dec
rcl
bak
cmp 0xFF
jez store_conversion
; 10s place
dec
rcl
cmp 0xFF
jez store_conversion
cmp 0x0
jez 8
push_a
res
add 10
bak
pop_a
sub 1
jrel -8
; 100s place
dec
rcl
cmp 0xFF
jez store_conversion
cmp 0x0
jez 8
push_a
res
add 100
bak
pop_a
sub 1
jrel -8
lbl step_3.5_conv_error
set_h system_invalid_symbol
set_l system_invalid_symbol
rcl
inc
cmp 0x0
jez 3
out
jrel -5
set_acc 0x0D
out
sub 3
out
ex_hl
jmp

lbl store_conversion
res
push_a
set_h system_ok
set_l system_ok
rcl
inc
cmp 0x00
jez 3
out
jrel -5
set_acc 0x0D
out
sub 3
out
set_h system_compiled_space_ptr
set_l system_compiled_space_ptr
rcl
bak
add 2
sto
inc
cmp 0x0
jnz 4 
rcl
add 1
sto
rcl
set_h_a
res
set_l_a
set_dref 0x00
inc
pop_a
sto
ex_hl
jmp

; Step 4: Run compiled space
; If in compiler mode then wait for run symbol
; Else if compiled space is closed (i.e. a word def with a matching : and ;, or is a standard line that's done)
; Run it by reading each byte, then jumping to the respective word, running that, and jumping back.
; Once done, jump to step 1
lbl step_4_run_comp
set_h system_compiled_space_ptr
set_l system_compiled_space_ptr
rcl
bak
set_dref 0x00
inc
rcl
set_dref 0xC0
set_h_a
res
set_l_a ; Recover compiled space ptr, set last section to 0xFFFF
set_dref 0xFF
inc
set_dref 0xFF
set_h system_run_ptr_bak
set_l system_run_ptr_bak
set_dref 0x00 ; compiled space
inc
set_dref 0xC0
ex_hl
set_h step_4_run_loop
set_l step_4_run_loop
lbl step_4_run_loop ; run loop
ex_hl
set_h system_run_ptr_bak
set_l system_run_ptr_bak
rcl
bak
inc
rcl
set_h_a
res
set_l_a
lbl step_4_run_loop_no_recovery
rcl
bak
inc
rcl
cmp 0xFF
jnz 4
res
cmp 0xFF
jez step_4_end_run_loop
res
cmp 0x0
jnz 5
rcl
push_a
inc
jrel step_4_run_loop_no_recovery
;out
push_a
rcl
;out
push_a
inc
set_a_h
bak
set_a_l
set_h system_run_ptr_bak
set_l system_run_ptr_bak
sto
inc
res
sto
pop_a
set_h_a
pop_a
set_l_a
jmp

lbl step_4_end_run_loop
set_h step_1_read_input
set_l step_1_read_input
jmp

; Reserved memory for backing up a couple values
org 0x07F0
lbl system_compiler_mode
word 0x0000
lbl system_line_space_backup
word 0x0000
lbl system_symbol_search_idx
word 0x0000
lbl system_compiled_space_ptr ; little-endian
word 0x00C0
lbl system_run_ptr_bak
word 0x0000

; system strings
; this gets doubled, starts at 0x1000
org 0x800
lbl system_ready
word 0x0D0A
str READY
lbl system_ok
str OK
lbl system_invalid_symbol
str ?SYM 
lbl system_syntax_error
str ?SYNTAX
lbl system_break
str ?BREAK
lbl debug_token
str ?TOKEN 
lbl system_crit_error
str ?CRIT

; word map space
; starts at 0x2000
; format: delimiter, string, 0x00FF, address
; 0x3B00 = denotes new word
; ; = separator
; types:
; 0x00 = assembly instruction
; 0x01 = address to word map
; 0xFF = end of word list
org 0x1000
lbl word_map

word 0x3B00
str +
word 0x00FF
addr operator+

word 0x3B00
str putc
word 0x00FF
addr operator_putc

word 0x3B00
str getch
word 0x00FF
addr operator_getc

word 0x3B00
str getc
word 0x00FF
addr operator_getc

word 0x3B00
str -
word 0x00FF
addr operator-

word 0x3BFF
; word 0x3B00
; str dup
; pop_a
; push_a
; push_a
; ex_hl
; jmp
; word 0x3B00
; str : 1+
; pop_a
; add 1
; push_a
; ex_hl
; jmp
; word 0x3B00
; str : 1-
; pop_a
; sub 1
; push_a
; ex_hl
; jmp

; Word data space
; Contains raw code for each word, no delimiter
org 0x2000
lbl word_data

lbl operator+
pop_a
bak
pop_a
add_bak
push_a
ex_hl
jmp

lbl operator-
pop_a
bak
pop_a
sub_bak
push_a
ex_hl
jmp

lbl operator_putc
pop_a
out
ex_hl
jmp

lbl operator_getc
in
push_a
ex_hl
jmp

lbl end_system_words