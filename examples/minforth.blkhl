; Minimal FORTH for blackhole_os
; How is this gonna work? No clue.
; Strings @ 0x1000
; System word space 0x2000-0x3FFF
; User word space 0x4000-0x9FFF
; Line space 0xA000-0xDFFF
set_l 0x00
; Set up for beginning of user space
set_h 0x40
; Zero user space and line space
lbl zero_memory
set_dref 0x00
inc
set_a_h
cmp 0xE0
jnz zero_memory

; ok, memory is initialized
; step 1: read input
; we'll set HL to the OK message
set_h end_print
set_l end_print
push_hl
set_h system_syntax_error
set_l system_syntax_error
push_hl
set_acc 0x0D
lbl main_loop
; print whatever HL points to, null terminated
jrel midway_print_hl
lbl end_print
set_h end_print
set_l end_print
push_hl

; set to beginning of line space
set_h 0xA0
set_l 0x00

lbl input_loop

; read from input
in

; if LF then act like it's CR
cmp 0x0A
jnz 2
add 3

; if CR then break
cmp 0x0D
jez end_input

; if backspace
cmp 0x08
jnz 4
; backspace key decrements to prev char
dec
rcl
jrel only_output

; store acc into (HL), increment HL
sto
inc

lbl only_output
; output acc, echo
out
jrel input_loop

; end loop
lbl end_input
out
sub 3
out
; write a null terminator
set_dref 0x0

; begin parser
; set hl to A000 for user strings
set_h 0xA0
set_l 0x00
lbl setup_tokenize
ex_hl
; load token temp space into alt hl
set_h token_space
set_l token_space
ex_hl
; we're splitting by space
lbl tokenize
rcl
bak
inc
; write char to token space
ex_hl
sto
inc
; check for token sep
cmp 0x20
jnz end_print_token
set_dref 0x0
; if found, load the thingy with token dbg msg and token space address
set_h print_token_after_msg
set_l print_token_after_msg
push_hl
set_h debug_token
set_l debug_token
push_hl
lbl midway_print_hl
jrel print_hl
lbl print_token_after_msg
set_h end_print_token
set_l end_print_token
push_hl
set_h token_space
set_l token_space
push_hl
jrel print_hl
lbl end_print_token
ex_hl
res
cmp 0x20
jez setup_tokenize
cmp 0x0
jnz tokenize


set_a_l
cmp 0x1
jez 17
set_h system_ok
set_l system_ok
push_hl
set_h main_loop
set_l main_loop
push_hl
set_h token_space
set_l token_space
push_hl
set_h print_hl
set_l print_hl
push_hl
set_h debug_token
set_l debug_token
push_hl
jrel print_hl

pop_hl
set_h shutdown_interpreter
set_l shutdown_interpreter
push_hl
set_h system_break
set_l system_break
push_hl
jrel print_hl
lbl shutdown_interpreter
ret

; print function
lbl print_hl
pop_hl
lbl print_hl_loop
rcl
out
inc
rcl
cmp 0x00
jnz print_hl_loop
set_acc 0x0D
out
sub 3
out
pop_hl
jmp

; system strings
; this gets doubled, starts at 0x1000
org 0x800
lbl system_ok
str OK
lbl system_invalid_symbol
str ?SYM 
lbl system_syntax_error
str ?SYNTAX
lbl system_break
str ?BREAK
lbl debug_token
str ?TOKEN 
lbl token_space